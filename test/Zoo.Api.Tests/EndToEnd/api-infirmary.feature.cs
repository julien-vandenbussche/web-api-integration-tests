// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.5.0.0
//      SpecFlow Generator Version:3.5.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Zoo.Api.Tests.EndToEnd
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.5.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("api-infirmary")]
    public partial class Api_InfirmaryFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "api-infirmary.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "EndToEnd", "api-infirmary", "  Allows you to perform medical procedures, list veterinarians etc.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Return all veterinary, contact information")]
        [NUnit.Framework.CategoryAttribute("get-veterinaries")]
        [NUnit.Framework.CategoryAttribute("ok")]
        public virtual void ReturnAllVeterinaryContactInformation()
        {
            string[] tagsOfScenario = new string[] {
                    "get-veterinaries",
                    "ok"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Return all veterinary, contact information", null, tagsOfScenario, argumentsOfScenario);
#line 5
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Address",
                            "Postal Code",
                            "City",
                            "Country",
                            "Phone",
                            "Website",
                            "EMail"});
                table11.AddRow(new string[] {
                            "Michel Klein",
                            "39 rue de chambor",
                            "75015",
                            "Paris",
                            "France",
                            "0908070605",
                            "michelklein.veterinaire.fr",
                            "michelklein@veterinaire.fr"});
                table11.AddRow(new string[] {
                            "John Dolittle",
                            "57 chemin de la grotte",
                            "39400",
                            "Morez",
                            "France",
                            "0102030405",
                            "dolittle.veterinaire.fr",
                            "johndolittle@veterinaire.fr"});
#line 6
    testRunner.Given("the referential have any veterinaries", ((string)(null)), table11, "Given ");
#line hidden
#line 10
    testRunner.When("i call the http resource \'api/v1/infirmary/veterinaries\' with GET http method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 11
    testRunner.Then("the http status code of response is 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Address",
                            "Phone",
                            "Website",
                            "EMail"});
                table12.AddRow(new string[] {
                            "Michel Klein",
                            "39 rue de chambor\\r\n75015 Paris\\r\nFrance",
                            "0908070605",
                            "michelklein.veterinaire.fr",
                            "michelklein@veterinaire.fr"});
                table12.AddRow(new string[] {
                            "John Dolittle",
                            "57 chemin de la grotte\\r\n39400 Morez\\r\nFrance",
                            "0102030405",
                            "dolittle.veterinaire.fr",
                            "johndolittle@veterinaire.fr"});
#line 12
    testRunner.And("the content have veterinary informations", ((string)(null)), table12, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
