// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.5.0.0
//      SpecFlow Generator Version:3.5.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Zoo.Api.Tests.EndToEnd
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.5.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("api-bears")]
    public partial class Api_BearsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "api-bears.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "EndToEnd", "api-bears", "  allows to recover the bears of the zoo, it is possible to recover them all, to " +
                    "filter by id.\r\n  the API allows the creation of animals in our referential.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
  #line hidden
#line 6
    testRunner.Given("The current context is Blue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Legs",
                        "FamilyId"});
            table1.AddRow(new string[] {
                        "1",
                        "Winnie",
                        "4",
                        "3"});
            table1.AddRow(new string[] {
                        "2",
                        "Léo",
                        "4",
                        "2"});
            table1.AddRow(new string[] {
                        "3",
                        "Sophie",
                        "4",
                        "1"});
            table1.AddRow(new string[] {
                        "4",
                        "Martin",
                        "4",
                        "3"});
#line 7
    testRunner.Given("the referential have any animals", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "ClassificationId"});
            table2.AddRow(new string[] {
                        "2",
                        "Lion",
                        "1"});
            table2.AddRow(new string[] {
                        "3",
                        "Bear",
                        "1"});
            table2.AddRow(new string[] {
                        "1",
                        "Giraffe",
                        "1"});
#line 13
    testRunner.Given("the referential have any families", ((string)(null)), table2, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name"});
            table3.AddRow(new string[] {
                        "1",
                        "Honey"});
#line 18
    testRunner.Given("the referential have any foods", ((string)(null)), table3, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name"});
            table4.AddRow(new string[] {
                        "1",
                        "Mammifère"});
#line 21
    testRunner.Given("the referential have any classification", ((string)(null)), table4, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("return all retrained bears when call api/bears and referential have any bears")]
        [NUnit.Framework.CategoryAttribute("retrained-animals")]
        [NUnit.Framework.CategoryAttribute("ok")]
        public virtual void ReturnAllRetrainedBearsWhenCallApiBearsAndReferentialHaveAnyBears()
        {
            string[] tagsOfScenario = new string[] {
                    "retrained-animals",
                    "ok"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("return all retrained bears when call api/bears and referential have any bears", null, tagsOfScenario, argumentsOfScenario);
#line 27
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
  this.FeatureBackground();
#line hidden
#line 28
    testRunner.When("i call the http resource \'api/v1/bears\' with GET http method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 29
    testRunner.Then("the http status code of response is 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name"});
                table5.AddRow(new string[] {
                            "1",
                            "Winnie"});
                table5.AddRow(new string[] {
                            "4",
                            "Martin"});
#line 30
    testRunner.And("the content have restrained bears", ((string)(null)), table5, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("return created value when call api/bears with valid creating bear")]
        [NUnit.Framework.CategoryAttribute("create-animal")]
        [NUnit.Framework.CategoryAttribute("ok")]
        public virtual void ReturnCreatedValueWhenCallApiBearsWithValidCreatingBear()
        {
            string[] tagsOfScenario = new string[] {
                    "create-animal",
                    "ok"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("return created value when call api/bears with valid creating bear", null, tagsOfScenario, argumentsOfScenario);
#line 36
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
  this.FeatureBackground();
#line hidden
#line 37
    testRunner.Given("I\'m zoo-director", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Title",
                            "FamilyId",
                            "FoodId"});
                table6.AddRow(new string[] {
                            "Bears can eat honey",
                            "3",
                            "1"});
#line 38
    testRunner.And("the animal can eats", ((string)(null)), table6, "And ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Title",
                            "Name",
                            "Legs",
                            "Foods"});
                table7.AddRow(new string[] {
                            "Barnabé eat honey",
                            "Barnabé",
                            "4",
                            "1"});
#line 41
    testRunner.When("i would like register bear", ((string)(null)), table7, "When ");
#line hidden
#line 44
    testRunner.And("i call the http resource \'api/v1/bears\' with POST http method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 45
    testRunner.Then("the http status code of response is 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Title",
                            "location",
                            "Id",
                            "Name",
                            "Legs",
                            "Foods"});
                table8.AddRow(new string[] {
                            "Barnabé eat honey",
                            "api/v1/bears/5",
                            "5",
                            "Barnabé",
                            "4",
                            "Honey"});
#line 46
    testRunner.And("the content is", ((string)(null)), table8, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
